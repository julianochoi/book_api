[project]
name = "book-api"
version = "0.1.0"
description = "API to handle and serve book data."
authors = [
    {name = "Juliano Choi",email = "julianochoi@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.13,<4.0"
dependencies = [
    "fastapi[standard] (>=0.115.12,<0.116.0)",
    "pydantic-settings (>=2.8.1,<3.0.0)",
    "sqlalchemy[aiosqlite] (>=2.0.40,<3.0.0)",
    "pyjwt (>=2.10.1,<3.0.0)",
    "bcrypt (>=4.3.0,<5.0.0)",
]

[tool.poetry]
package-mode = false

[tool.poetry.group.dev.dependencies]
ruff = "^0.11.5"
mypy = "^1.15.0"
pytest = "^8.3.5"
polyfactory = "^2.20.0"
pytest-asyncio = "^0.26.0"
coverage = "^7.8.0"

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = "tests"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"

[tool.coverage]
paths.source = ["app"]
run.omit = [
  "tests/**",
  "app/main.py",
  "app/core/config.py",
]
run.branch = true
run.concurrency = ["greenlet"]  # required for more accurate coverage with async code
report.precision = 1
report.show_missing = true
report.skip_covered = true


[tool.ruff]
indent-width = 4
line-length = 120

[tool.ruff.lint]
select = [
  "E",
  "F",
  "I",
  "T20",
  "FAST",
]

[tool.ruff.format]
indent-style = "tab"

[tool.mypy]
files = "app"
strict = true

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"